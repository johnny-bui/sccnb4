/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.syntax3.lexer.node;

import java.util.*;
import org.sablecc.sablecc.syntax3.lexer.analysis.*;

@SuppressWarnings("nls")
public final class ATokens extends PTokens
{
    private TTokenKeyword _tokenKeyword_;
    private final LinkedList<PUnit> _units_ = new LinkedList<PUnit>();

    public ATokens()
    {
        // Constructor
    }

    public ATokens(
        @SuppressWarnings("hiding") TTokenKeyword _tokenKeyword_,
        @SuppressWarnings("hiding") List<PUnit> _units_)
    {
        // Constructor
        setTokenKeyword(_tokenKeyword_);

        setUnits(_units_);

    }

    @Override
    public Object clone()
    {
        return new ATokens(
            cloneNode(this._tokenKeyword_),
            cloneList(this._units_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATokens(this);
    }

    public TTokenKeyword getTokenKeyword()
    {
        return this._tokenKeyword_;
    }

    public void setTokenKeyword(TTokenKeyword node)
    {
        if(this._tokenKeyword_ != null)
        {
            this._tokenKeyword_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tokenKeyword_ = node;
    }

    public LinkedList<PUnit> getUnits()
    {
        return this._units_;
    }

    public void setUnits(List<PUnit> list)
    {
        this._units_.clear();
        this._units_.addAll(list);
        for(PUnit e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tokenKeyword_)
            + toString(this._units_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tokenKeyword_ == child)
        {
            this._tokenKeyword_ = null;
            return;
        }

        if(this._units_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tokenKeyword_ == oldChild)
        {
            setTokenKeyword((TTokenKeyword) newChild);
            return;
        }

        for(ListIterator<PUnit> i = this._units_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PUnit) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
