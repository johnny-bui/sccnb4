/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.syntax3.lexer.node;

import org.sablecc.sablecc.syntax3.lexer.analysis.*;

@SuppressWarnings("nls")
public final class ALookback extends PLookback
{
    private TLookbackKeyword _lookbackKeyword_;
    private TNotKeyword _notKeyword_;
    private PExpression _expression_;

    public ALookback()
    {
        // Constructor
    }

    public ALookback(
        @SuppressWarnings("hiding") TLookbackKeyword _lookbackKeyword_,
        @SuppressWarnings("hiding") TNotKeyword _notKeyword_,
        @SuppressWarnings("hiding") PExpression _expression_)
    {
        // Constructor
        setLookbackKeyword(_lookbackKeyword_);

        setNotKeyword(_notKeyword_);

        setExpression(_expression_);

    }

    @Override
    public Object clone()
    {
        return new ALookback(
            cloneNode(this._lookbackKeyword_),
            cloneNode(this._notKeyword_),
            cloneNode(this._expression_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALookback(this);
    }

    public TLookbackKeyword getLookbackKeyword()
    {
        return this._lookbackKeyword_;
    }

    public void setLookbackKeyword(TLookbackKeyword node)
    {
        if(this._lookbackKeyword_ != null)
        {
            this._lookbackKeyword_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lookbackKeyword_ = node;
    }

    public TNotKeyword getNotKeyword()
    {
        return this._notKeyword_;
    }

    public void setNotKeyword(TNotKeyword node)
    {
        if(this._notKeyword_ != null)
        {
            this._notKeyword_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._notKeyword_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lookbackKeyword_)
            + toString(this._notKeyword_)
            + toString(this._expression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lookbackKeyword_ == child)
        {
            this._lookbackKeyword_ = null;
            return;
        }

        if(this._notKeyword_ == child)
        {
            this._notKeyword_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lookbackKeyword_ == oldChild)
        {
            setLookbackKeyword((TLookbackKeyword) newChild);
            return;
        }

        if(this._notKeyword_ == oldChild)
        {
            setNotKeyword((TNotKeyword) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
