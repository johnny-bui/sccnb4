/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.syntax3.lexer.node;

import org.sablecc.sablecc.syntax3.lexer.analysis.*;

@SuppressWarnings("nls")
public final class ALookExpression extends PExpression
{
    private PExpression _expression_;
    private PLookback _lookback_;
    private PLookahead _lookahead_;

    public ALookExpression()
    {
        // Constructor
    }

    public ALookExpression(
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") PLookback _lookback_,
        @SuppressWarnings("hiding") PLookahead _lookahead_)
    {
        // Constructor
        setExpression(_expression_);

        setLookback(_lookback_);

        setLookahead(_lookahead_);

    }

    @Override
    public Object clone()
    {
        return new ALookExpression(
            cloneNode(this._expression_),
            cloneNode(this._lookback_),
            cloneNode(this._lookahead_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALookExpression(this);
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public PLookback getLookback()
    {
        return this._lookback_;
    }

    public void setLookback(PLookback node)
    {
        if(this._lookback_ != null)
        {
            this._lookback_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lookback_ = node;
    }

    public PLookahead getLookahead()
    {
        return this._lookahead_;
    }

    public void setLookahead(PLookahead node)
    {
        if(this._lookahead_ != null)
        {
            this._lookahead_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lookahead_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._expression_)
            + toString(this._lookback_)
            + toString(this._lookahead_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._lookback_ == child)
        {
            this._lookback_ = null;
            return;
        }

        if(this._lookahead_ == child)
        {
            this._lookahead_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this._lookback_ == oldChild)
        {
            setLookback((PLookback) newChild);
            return;
        }

        if(this._lookahead_ == oldChild)
        {
            setLookahead((PLookahead) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
