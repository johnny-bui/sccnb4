/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.syntax3.lexer.node;

import org.sablecc.sablecc.syntax3.lexer.analysis.*;

@SuppressWarnings("nls")
public final class ALexerContext extends PLexerContext
{
    private TIdentifier _name_;
    private PTokens _tokens_;
    private PIgnored _ignored_;

    public ALexerContext()
    {
        // Constructor
    }

    public ALexerContext(
        @SuppressWarnings("hiding") TIdentifier _name_,
        @SuppressWarnings("hiding") PTokens _tokens_,
        @SuppressWarnings("hiding") PIgnored _ignored_)
    {
        // Constructor
        setName(_name_);

        setTokens(_tokens_);

        setIgnored(_ignored_);

    }

    @Override
    public Object clone()
    {
        return new ALexerContext(
            cloneNode(this._name_),
            cloneNode(this._tokens_),
            cloneNode(this._ignored_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALexerContext(this);
    }

    public TIdentifier getName()
    {
        return this._name_;
    }

    public void setName(TIdentifier node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public PTokens getTokens()
    {
        return this._tokens_;
    }

    public void setTokens(PTokens node)
    {
        if(this._tokens_ != null)
        {
            this._tokens_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tokens_ = node;
    }

    public PIgnored getIgnored()
    {
        return this._ignored_;
    }

    public void setIgnored(PIgnored node)
    {
        if(this._ignored_ != null)
        {
            this._ignored_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ignored_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._name_)
            + toString(this._tokens_)
            + toString(this._ignored_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._tokens_ == child)
        {
            this._tokens_ = null;
            return;
        }

        if(this._ignored_ == child)
        {
            this._ignored_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._name_ == oldChild)
        {
            setName((TIdentifier) newChild);
            return;
        }

        if(this._tokens_ == oldChild)
        {
            setTokens((PTokens) newChild);
            return;
        }

        if(this._ignored_ == oldChild)
        {
            setIgnored((PIgnored) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
