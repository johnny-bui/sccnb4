/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.syntax3.lexer.node;

import org.sablecc.sablecc.syntax3.lexer.analysis.*;

@SuppressWarnings("nls")
public final class AAlternatedElement extends PElement
{
    private TElementName _elementName_;
    private PUnit _left_;
    private PUnit _right_;
    private PManyOperator _manyOperator_;

    public AAlternatedElement()
    {
        // Constructor
    }

    public AAlternatedElement(
        @SuppressWarnings("hiding") TElementName _elementName_,
        @SuppressWarnings("hiding") PUnit _left_,
        @SuppressWarnings("hiding") PUnit _right_,
        @SuppressWarnings("hiding") PManyOperator _manyOperator_)
    {
        // Constructor
        setElementName(_elementName_);

        setLeft(_left_);

        setRight(_right_);

        setManyOperator(_manyOperator_);

    }

    @Override
    public Object clone()
    {
        return new AAlternatedElement(
            cloneNode(this._elementName_),
            cloneNode(this._left_),
            cloneNode(this._right_),
            cloneNode(this._manyOperator_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAlternatedElement(this);
    }

    public TElementName getElementName()
    {
        return this._elementName_;
    }

    public void setElementName(TElementName node)
    {
        if(this._elementName_ != null)
        {
            this._elementName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elementName_ = node;
    }

    public PUnit getLeft()
    {
        return this._left_;
    }

    public void setLeft(PUnit node)
    {
        if(this._left_ != null)
        {
            this._left_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._left_ = node;
    }

    public PUnit getRight()
    {
        return this._right_;
    }

    public void setRight(PUnit node)
    {
        if(this._right_ != null)
        {
            this._right_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._right_ = node;
    }

    public PManyOperator getManyOperator()
    {
        return this._manyOperator_;
    }

    public void setManyOperator(PManyOperator node)
    {
        if(this._manyOperator_ != null)
        {
            this._manyOperator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._manyOperator_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._elementName_)
            + toString(this._left_)
            + toString(this._right_)
            + toString(this._manyOperator_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._elementName_ == child)
        {
            this._elementName_ = null;
            return;
        }

        if(this._left_ == child)
        {
            this._left_ = null;
            return;
        }

        if(this._right_ == child)
        {
            this._right_ = null;
            return;
        }

        if(this._manyOperator_ == child)
        {
            this._manyOperator_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._elementName_ == oldChild)
        {
            setElementName((TElementName) newChild);
            return;
        }

        if(this._left_ == oldChild)
        {
            setLeft((PUnit) newChild);
            return;
        }

        if(this._right_ == oldChild)
        {
            setRight((PUnit) newChild);
            return;
        }

        if(this._manyOperator_ == oldChild)
        {
            setManyOperator((PManyOperator) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
