/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.syntax3.lexer.node;

import java.util.*;
import org.sablecc.sablecc.syntax3.lexer.analysis.*;

@SuppressWarnings("nls")
public final class ARoot extends PRoot
{
    private TRootKeyword _rootKeyword_;
    private final LinkedList<TIdentifier> _identifiers_ = new LinkedList<TIdentifier>();

    public ARoot()
    {
        // Constructor
    }

    public ARoot(
        @SuppressWarnings("hiding") TRootKeyword _rootKeyword_,
        @SuppressWarnings("hiding") List<TIdentifier> _identifiers_)
    {
        // Constructor
        setRootKeyword(_rootKeyword_);

        setIdentifiers(_identifiers_);

    }

    @Override
    public Object clone()
    {
        return new ARoot(
            cloneNode(this._rootKeyword_),
            cloneList(this._identifiers_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARoot(this);
    }

    public TRootKeyword getRootKeyword()
    {
        return this._rootKeyword_;
    }

    public void setRootKeyword(TRootKeyword node)
    {
        if(this._rootKeyword_ != null)
        {
            this._rootKeyword_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rootKeyword_ = node;
    }

    public LinkedList<TIdentifier> getIdentifiers()
    {
        return this._identifiers_;
    }

    public void setIdentifiers(List<TIdentifier> list)
    {
        this._identifiers_.clear();
        this._identifiers_.addAll(list);
        for(TIdentifier e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._rootKeyword_)
            + toString(this._identifiers_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._rootKeyword_ == child)
        {
            this._rootKeyword_ = null;
            return;
        }

        if(this._identifiers_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._rootKeyword_ == oldChild)
        {
            setRootKeyword((TRootKeyword) newChild);
            return;
        }

        for(ListIterator<TIdentifier> i = this._identifiers_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TIdentifier) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
