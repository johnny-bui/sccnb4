/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.syntax3.lexer.analysis;

import org.sablecc.sablecc.syntax3.lexer.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAGrammar(AGrammar node);
    void caseALexer(ALexer node);
    void caseANamedExpression(ANamedExpression node);
    void caseAOrExpression(AOrExpression node);
    void caseAConcatenationExpression(AConcatenationExpression node);
    void caseALookExpression(ALookExpression node);
    void caseAShortestExpression(AShortestExpression node);
    void caseALongestExpression(ALongestExpression node);
    void caseASubtractionExpression(ASubtractionExpression node);
    void caseAExceptExpression(AExceptExpression node);
    void caseAIntersectionExpression(AIntersectionExpression node);
    void caseAUnaryOperatorExpression(AUnaryOperatorExpression node);
    void caseASeparatedExpression(ASeparatedExpression node);
    void caseAUnitExpression(AUnitExpression node);
    void caseAEpsilonExpression(AEpsilonExpression node);
    void caseAIntervalExpression(AIntervalExpression node);
    void caseAAnyExpression(AAnyExpression node);
    void caseALookback(ALookback node);
    void caseALookahead(ALookahead node);
    void caseACharCharacter(ACharCharacter node);
    void caseADecCharacter(ADecCharacter node);
    void caseAHexCharacter(AHexCharacter node);
    void caseANameUnit(ANameUnit node);
    void caseAStringUnit(AStringUnit node);
    void caseACharacterUnit(ACharacterUnit node);
    void caseAStartUnit(AStartUnit node);
    void caseAEndUnit(AEndUnit node);
    void caseALexerPriority(ALexerPriority node);
    void caseALexerContext(ALexerContext node);
    void caseATokens(ATokens node);
    void caseAIgnored(AIgnored node);
    void caseAInvestigator(AInvestigator node);
    void caseASelector(ASelector node);
    void caseAParser(AParser node);
    void caseARoot(ARoot node);
    void caseAParserContext(AParserContext node);
    void caseAParserProduction(AParserProduction node);
    void caseADanglingQualifier(ADanglingQualifier node);
    void caseATokenQualifier(ATokenQualifier node);
    void caseAParserAlternative(AParserAlternative node);
    void caseANormalElement(ANormalElement node);
    void caseASeparatedElement(ASeparatedElement node);
    void caseAAlternatedElement(AAlternatedElement node);
    void caseAZeroOrOneUnaryOperator(AZeroOrOneUnaryOperator node);
    void caseAManyUnaryOperator(AManyUnaryOperator node);
    void caseAZeroOrMoreManyOperator(AZeroOrMoreManyOperator node);
    void caseAOneOrMoreManyOperator(AOneOrMoreManyOperator node);
    void caseANumberManyOperator(ANumberManyOperator node);
    void caseAIntervalManyOperator(AIntervalManyOperator node);
    void caseAAtLeastManyOperator(AAtLeastManyOperator node);
    void caseADanglingElement(ADanglingElement node);
    void caseALeftParserPriority(ALeftParserPriority node);
    void caseARightParserPriority(ARightParserPriority node);
    void caseAUnaryParserPriority(AUnaryParserPriority node);
    void caseATransformation(ATransformation node);
    void caseAProductionTransformations(AProductionTransformations node);
    void caseAProductionTransformation(AProductionTransformation node);
    void caseAAlternativeTransformations(AAlternativeTransformations node);
    void caseAAlternativeTransformation(AAlternativeTransformation node);
    void caseAUnnamedAlternativeReference(AUnnamedAlternativeReference node);
    void caseANamedAlternativeReference(ANamedAlternativeReference node);
    void caseANullTransformationElement(ANullTransformationElement node);
    void caseAReferenceTransformationElement(AReferenceTransformationElement node);
    void caseANewTransformationElement(ANewTransformationElement node);
    void caseAListTransformationElement(AListTransformationElement node);
    void caseAReferenceListElement(AReferenceListElement node);
    void caseAListReferenceListElement(AListReferenceListElement node);
    void caseALeftListReferenceListElement(ALeftListReferenceListElement node);
    void caseARightListReferenceListElement(ARightListReferenceListElement node);
    void caseANewListElement(ANewListElement node);
    void caseANaturalElementReference(ANaturalElementReference node);
    void caseATransformedElementReference(ATransformedElementReference node);
    void caseATree(ATree node);
    void caseATreeProduction(ATreeProduction node);
    void caseATreeAlternative(ATreeAlternative node);

    void caseTAlternativeKeyword(TAlternativeKeyword node);
    void caseTAndKeyword(TAndKeyword node);
    void caseTAnyKeyword(TAnyKeyword node);
    void caseTContextKeyword(TContextKeyword node);
    void caseTDanglingKeyword(TDanglingKeyword node);
    void caseTEmptyKeyword(TEmptyKeyword node);
    void caseTEndKeyword(TEndKeyword node);
    void caseTExceptKeyword(TExceptKeyword node);
    void caseTGrammarKeyword(TGrammarKeyword node);
    void caseTGroupKeyword(TGroupKeyword node);
    void caseTIgnoredKeyword(TIgnoredKeyword node);
    void caseTInvestigatorKeyword(TInvestigatorKeyword node);
    void caseTLeftKeyword(TLeftKeyword node);
    void caseTLexerKeyword(TLexerKeyword node);
    void caseTListKeyword(TListKeyword node);
    void caseTLongestKeyword(TLongestKeyword node);
    void caseTLookaheadKeyword(TLookaheadKeyword node);
    void caseTLookbackKeyword(TLookbackKeyword node);
    void caseTNotKeyword(TNotKeyword node);
    void caseTNewKeyword(TNewKeyword node);
    void caseTNullKeyword(TNullKeyword node);
    void caseTParserKeyword(TParserKeyword node);
    void caseTPrecedenceKeyword(TPrecedenceKeyword node);
    void caseTProductionKeyword(TProductionKeyword node);
    void caseTRightKeyword(TRightKeyword node);
    void caseTRootKeyword(TRootKeyword node);
    void caseTSelectorKeyword(TSelectorKeyword node);
    void caseTSeparatorKeyword(TSeparatorKeyword node);
    void caseTShortestKeyword(TShortestKeyword node);
    void caseTStartKeyword(TStartKeyword node);
    void caseTTokenKeyword(TTokenKeyword node);
    void caseTTransformationKeyword(TTransformationKeyword node);
    void caseTTreeKeyword(TTreeKeyword node);
    void caseTUnaryKeyword(TUnaryKeyword node);
    void caseTIdentifier(TIdentifier node);
    void caseTAlternativeName(TAlternativeName node);
    void caseTElementName(TElementName node);
    void caseTEpsilon(TEpsilon node);
    void caseTChar(TChar node);
    void caseTString(TString node);
    void caseTNumber(TNumber node);
    void caseTDecChar(TDecChar node);
    void caseTHexChar(THexChar node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTAssign(TAssign node);
    void caseTArrow(TArrow node);
    void caseTBar(TBar node);
    void caseTCaret(TCaret node);
    void caseTColon(TColon node);
    void caseTComma(TComma node);
    void caseTDot(TDot node);
    void caseTGt(TGt node);
    void caseTMinus(TMinus node);
    void caseTPlus(TPlus node);
    void caseTQMark(TQMark node);
    void caseTSemicolon(TSemicolon node);
    void caseTStar(TStar node);
    void caseTThreeDots(TThreeDots node);
    void caseTTwoDots(TTwoDots node);
    void caseTBlank(TBlank node);
    void caseTLineComment(TLineComment node);
    void caseTLongComment(TLongComment node);
    void caseTCtrlZ(TCtrlZ node);
    void caseTInvalidKeyword(TInvalidKeyword node);
    void caseTInvalidNumber(TInvalidNumber node);
    void caseTInvalidNormalIdentifier(TInvalidNormalIdentifier node);
    void caseTInvalidRichIdentifier(TInvalidRichIdentifier node);
    void caseTInvalidString(TInvalidString node);
    void caseTInvalidHexChar(TInvalidHexChar node);
    void caseTInvalidDecChar(TInvalidDecChar node);
    void caseTInvalidAlternativeName(TInvalidAlternativeName node);
    void caseTInvalidElementName(TInvalidElementName node);
    void caseTInvalidCharacter(TInvalidCharacter node);
    void caseEOF(EOF node);
}
